{"/home/travis/build/npmtest/node-npmtest-grunt-exec/test.js":"/* istanbul instrument in package npmtest_grunt_exec */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-exec/lib.npmtest_grunt_exec.js":"/* istanbul instrument in package npmtest_grunt_exec */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_exec = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_exec = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-exec/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-exec && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_exec */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_exec\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_exec.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_exec.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_exec.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_exec.__dirname + '/lib.npmtest_grunt_exec.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-exec/node_modules/grunt-exec/Gruntfile.js":"module.exports = function(grunt) {\n  grunt.initConfig({\n    exec: {\n      remove_logs: {\n        command: process.platform === 'win32' ? 'del *.log' : 'rm -f *.log'\n      , stdout: false\n      , stderr: false\n      }\n    , list_files: {\n        cmd: process.platform === 'win32' ? 'dir' : 'ls -l **'\n      }\n    , list_all_files: process.platform === 'win32' ? 'dir' : 'ls -la'\n    , echo_grunt_version: {\n        cmd: function() { return 'echo ' + this.version; }\n      }\n    , print_name: {\n        cmd: function(firstName, lastName) {\n          var formattedName = [\n                (lastName || 'grunt').toUpperCase()\n              , (firstName || 'exec').toUpperCase()\n              ].join(', ');\n\n          return 'echo ' + formattedName;\n        }\n      }\n    , test_mysql_ticket: {\n\n      cmd: function () {\n        var DB_USER = \"abc\";\n        var DB_PASSWORD = \"password\";\n        var DATABASE = \"database-with-dashes\";\n        return `echo mysql -u \"${DB_USER}\" -p\"${DB_PASSWORD}\" -e \"CREATE DATABASE IF NOT EXISTS \\`${DATABASE}\\`;\"`;\n      },\n      callback: function(err, stdout, stderr) {\n        console.log('stdout: ' + stdout);\n        if ((stdout + \"\").trim() !== 'mysql -u \"abc\" -p\"password\" -e \"CREATE DATABASE IF NOT EXISTS `database-with-dashes`;\"') {\n          grunt.log.error(\"Unexpected result: \" + stdout);\n          return false;\n        }\n      }\n    }\n    , test_large_stdout_buffer: {\n      // maxBuffer has to be equal to count + 1\n      options: { maxBuffer: 10000001, encoding: 'buffer' },\n      \n      stdout: false, // suppress the stdout otherwise you get a bunch of garbage being displayed\n      \n      cmd: function () {\n        var count = 1000000;\n        // generates count number of random bytes that are console-friendly (printable ascii 32->126)\n        return `node -e \"var garbage = ''; var count = ${count}; for (var i = 0; i < count; i++) { var c = String.fromCharCode(Math.floor(32 + (Math.random() * 94))); garbage += c; } process.stdout.write(garbage);\"`;\n      },\n      callback: function(err, stdout, stderr) {\n        var count = 1000000;\n\n        if (err && err.toString() === \"Error: stdout maxBuffer exceeded\") {\n          grunt.log.error(\"Unexpected maxBuffer exceeded\");\n          return false;\n        }\n\n        if (typeof stdout === \"string\") {\n          grunt.log.error(\"Unexpected stdout type (string), expected buffer. String length was \" + stdout.length);\n          return false;\n        }\n\n        var str = stdout.toString();\n\n        if (str.length !== count) {\n          grunt.log.error(\"Unexpected result: \" + str.length + \" != \" + count.toString());\n          return false;\n        }\n      }\n    }\n    // this used to produce an error when using 'exec'\n    , test_large_stdout_nocallback: {\n      stdout: false, // suppress the stdout otherwise you get a bunch of garbage being displayed\n      \n      cmd: function () {\n        var count = 1000000;\n        // generates count number of random bytes that are console-friendly (printable ascii 32->126)\n        return `node -e \"var garbage = ''; var count = ${count}; for (var i = 0; i < count; i++) { var c = String.fromCharCode(Math.floor(32 + (Math.random() * 94))); garbage += c; } process.stdout.write(garbage);\"`;\n      },\n    }\n    , test_large_stdout_string: {\n      // maxBuffer has to be equal to count + 1\n      options: { maxBuffer: 10000001 },\n      \n      stdout: false, // suppress the stdout otherwise you get a bunch of garbage being displayed\n      \n      cmd: function () {\n        var count = 1000000;\n        // generates count number of random bytes that are console-friendly (printable ascii 32->126)\n        return `node -e \"var garbage = ''; var count = ${count}; for (var i = 0; i < count; i++) { var c = String.fromCharCode(Math.floor(32 + (Math.random() * 94))); garbage += c; } process.stdout.write(garbage);\"`;\n      },\n      callback: function(err, stdout, stderr) {\n        var count = 1000000;\n\n        if (err && err.toString() === \"Error: stdout maxBuffer exceeded\") {\n          grunt.log.error(\"Unexpected maxBuffer exceeded\");\n          return false;\n        }\n\n        if (typeof stdout !== \"string\") {\n          grunt.log.error(\"Unexpected stdout type (\" + (typeof stdout) + \"), expected string.\");\n          return false;\n        }\n\n        if (stdout.length !== count) {\n          grunt.log.error(\"Unexpected result: \" + stdout.length + \" != \" + count.toString());\n          return false;\n        }\n      }\n    }\n    , test_callback: {\n        cmd : process.platform === 'win32' ? 'dir' : 'ls -h',\n        callback : function(error, stdout, stderr){\n          var util = require('util');\n          console.log(util.inspect(error));\n          console.log('stdout: ' + stdout);\n          console.log('stderr: ' + stderr);\n        },\n        stdout: 'pipe'\n      },\n      test_callback_no_data: {\n        cmd : process.platform === 'win32' ? 'dir' : 'ls -h',\n        callback : function(error, stdout, stderr){\n          var util = require('util');\n          console.log(util.inspect(error));\n          console.log('stdout: ' + stdout);\n          console.log('stderr: ' + stderr);\n        }\n      },\n      npm_outdated_color_test: {\n        command: 'npm outdated --long --ansi --color',\n        stdout: 'inherit',\n        stderr: 'inherit'\n      },\n      set_user_input: {\n        cmd: 'set /p TestCurrentUserName= \"Enter your name:  \"',\n        stdout: 'inherit',\n        stderr: 'inherit',\n        stdin: 'inherit'\n      },\n      test_timeout: {\n        cmd: 'set /p TestCurrentUserName= \"Please do not enter your name:  \"',\n        stdout: 'inherit',\n        stderr: 'inherit',\n        stdin: 'inherit',\n        timeout: 500\n      },\n      test_stdio_inherit: {\n        cmd: 'npm list',\n        stdio: 'inherit'\n      },\n      test_stdio_ignore: {\n        cmd: 'npm list',\n        stdio: 'ignore'\n      }\n    }\n\n  , jshint: {\n      options: {\n      // enforcing options\n        curly: true\n      , forin: true\n      , newcap: true\n      , noarg: true\n      , noempty: true\n      , nonew: true\n      , quotmark: true\n      , undef: true\n      , unused: true\n      , trailing: true\n      , maxlen: 80\n\n      // relaxing options\n      , boss: true\n      , es5: true\n      , expr: true\n      , laxcomma: true\n\n      // environments\n      , node: true\n      }\n    , tasks: ['tasks/*.js']\n    , tests: ['test/*.js']\n    , gruntfile: ['Gruntfile.js']\n    }\n  });\n\n  grunt.loadTasks('tasks');\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n\n  grunt.registerTask('lint', 'jshint');\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-exec/node_modules/grunt-exec/tasks/exec.js":"// grunt-exec\r\n// ==========\r\n// * GitHub: https://github.com/jharding/grunt-exec\r\n// * Original Copyright (c) 2012 Jake Harding\r\n// * Copyright (c) 2017 grunt-exec\r\n// * Licensed under the MIT license.\r\n\r\n// grunt-exe 2.0.0+ simulates the convenience of child_process.exec with the capabilities of child_process.spawn\r\n// this was done primarily to preserve colored output from applications such as npm\r\n// a lot of work was done to simulate the original behavior of both child_process.exec and grunt-exec\r\n// as such there may be unintended consequences so the major revision was bumped\r\n// a breaking change was made to the 'maxBuffer kill process' scenario so it is treated as an error and provides more detail (--verbose)\r\n// stdout and stderr buffering & maxBuffer constraints are removed entirely where possible\r\n// new features: detached (boolean), argv0 (override the executable name passed to the application), shell (boolean or string)\r\n// fd #s greater than 2 not yet supported (ipc piping) which is spawn-specific and very rarely required\r\n// TODO: support stdout and stderr Buffer objects passed in\r\n// TODO: stdin/stdout/stderr string as file name => open the file and read/write from it\r\n\r\nmodule.exports = function(grunt) {\r\n  var cp = require('child_process')\r\n    , f = require('util').format\r\n    , _ = grunt.util._\r\n    , log = grunt.log\r\n    , verbose = grunt.verbose;\r\n\r\n  grunt.registerMultiTask('exec', 'Execute shell commands.', function() {\r\n\r\n    var callbackErrors = false;\r\n\r\n    var defaultOut = log.write;\r\n    var defaultError = log.error;\r\n\r\n    var defaultCallback = function(err, stdout, stderr) {\r\n      if (err) {\r\n        callbackErrors = true;\r\n        defaultError('Error executing child process: ' + err.toString());\r\n      }\r\n    };\r\n\r\n    var data = this.data\r\n      , execOptions = data.options !== undefined ? data.options : {}\r\n      , stdout = data.stdout !== undefined ? data.stdout : true\r\n      , stderr = data.stderr !== undefined ? data.stderr : true\r\n      , stdin = data.stdin !== undefined ? data.stdin : false\r\n      , stdio = data.stdio\r\n      , callback = _.isFunction(data.callback) ? data.callback : defaultCallback\r\n      , exitCodes = data.exitCode || data.exitCodes || 0\r\n      , command\r\n      , childProcess\r\n      , args = [].slice.call(arguments, 0)\r\n      , done = this.async();\r\n\r\n    // https://github.com/jharding/grunt-exec/pull/30\r\n    exitCodes = _.isArray(exitCodes) ? exitCodes : [exitCodes];\r\n\r\n    // allow for command to be specified in either\r\n    // 'command' or 'cmd' property, or as a string.\r\n    command = data.command || data.cmd || (_.isString(data) && data);\r\n\r\n    if (!command) {\r\n      defaultError('Missing command property.');\r\n      return done(false);\r\n    }\r\n\r\n    if (data.cwd && _.isFunction(data.cwd)) {\r\n      execOptions.cwd = data.cwd.apply(grunt, args);\r\n    } else if (data.cwd) {\r\n      execOptions.cwd = data.cwd;\r\n    }\r\n\r\n    // default to current process cwd\r\n    execOptions.cwd = execOptions.cwd || process.cwd();\r\n\r\n    // manually supported (spawn vs exec)\r\n    // 200*1024 is default maxBuffer of child_process.exec\r\n    // NOTE: must be < require('buffer').kMaxLength or a RangeError will be triggered\r\n    var maxBuffer = data.maxBuffer || execOptions.maxBuffer || (200*1024);\r\n\r\n    // timeout manually supportted (spawn vs exec)\r\n    execOptions.timeout = execOptions.timeout || data.timeout || 0;\r\n    // kill signal manually supportted (spawn vs exec)\r\n    execOptions.killSignal = execOptions.killSignal || data.killSignal || 'SIGTERM';\r\n\r\n    // support shell scripts like 'npm.cmd' by default (spawn vs exec)\r\n    var shell = (typeof data.shell === 'undefined') ? execOptions.shell : data.shell;\r\n    execOptions.shell = (typeof shell === 'string') ? shell : (shell === false ? false : true);\r\n\r\n    // kept in data.encoding in case it is set to 'buffer' for final callback\r\n    data.encoding = data.encoding || execOptions.encoding || 'utf8';\r\n\r\n    stdio = stdio || execOptions.stdio || undefined;\r\n    if (stdio === 'inherit') {\r\n      stdout = 'inherit';\r\n      stderr = 'inherit';\r\n      stdin = 'inherit';\r\n    } else if (stdio === 'pipe') {\r\n      stdout = 'pipe';\r\n      stderr = 'pipe';\r\n      stdin = 'pipe';\r\n    } else if (stdio === 'ignore') {\r\n      stdout = 'ignore';\r\n      stderr = 'ignore';\r\n      stdin = 'ignore';\r\n    }\r\n\r\n    if (_.isFunction(command)) {\r\n      command = command.apply(grunt, args);\r\n    }\r\n\r\n    if (!_.isString(command)) {\r\n      defaultError('Command property must be a string.');\r\n      return done(false);\r\n    }\r\n\r\n    verbose.subhead(command);\r\n\r\n    // manually parse args into array (spawn vs exec)\r\n    var splitArgs = function(command) {\r\n      // Regex Explanation                                          Regex\r\n      // ---------------------------------------------------------------------\r\n      // 0-* spaces                                                 \\s*\r\n      // followed by either:\r\n      //   [NOT: a space, half quote, or double quote] 1-* times    [^\\s'\"]+\r\n      //     followed by either:\r\n      //       [half quote or double quote] in the future           (?=['\"])\r\n      //       or 1-* spaces                                        \\s+\r\n      //       or end of string                                     $\r\n      //   or half quote                                            [']\r\n      //     followed by 0-*:\r\n      //       [NOT: a backslash, or half quote]                    [^\\\\']\r\n      //       or a backslash followed by any character             \\\\.\r\n      //     followed by a half quote                               [']\r\n      //   or double quote                                          [\"]\r\n      //     followed by 0-*:\r\n      //       [NOT: a backslash, or double quote]                  [^\\\\\"]\r\n      //       or a backslash followed by any character             \\\\.\r\n      //     followed by a double quote                             [\"]\r\n      //   or end of string                                         $\r\n      var pieces = command.match(/\\s*([^\\s'\"]+(?:(?=['\"])|\\s+|$)|(?:(?:['](?:([^\\\\']|\\\\.)*)['])|(?:[\"](?:([^\\\\\"]|\\\\.)*)[\"]))|$)/g);\r\n      var args = [];\r\n      var next = false;\r\n\r\n      for (var i = 0; i < pieces.length; i++) {\r\n        var piece = pieces[i];\r\n        if (piece.length > 0) {\r\n          if (next || args.length === 0 || piece.charAt(0) === ' ') {\r\n            args.push(piece.trim());\r\n          } else {\r\n            var last = args.length - 1;\r\n            args[last] = args[last] + piece.trim();\r\n          }\r\n          next = piece.endsWith(' ');\r\n        }\r\n      }\r\n\r\n      return args;\r\n    };\r\n\r\n    var args = splitArgs(command);\r\n    command = args[0];\r\n\r\n    if (args.length > 1) {\r\n      args = args.slice(1);\r\n    } else {\r\n      args = [];\r\n    }\r\n\r\n    // only save stdout and stderr if a custom callback is used\r\n    var bufferedOutput = callback !== defaultCallback;\r\n\r\n    // different stdio behavior (spawn vs exec)\r\n    var stdioOption = function(value, integerValue, inheritValue) {\r\n      return value === integerValue ? integerValue\r\n        : value === 'inherit' ? inheritValue\r\n        : bufferedOutput ? 'pipe' : value === 'pipe' || value === true || value === null || value === undefined ? 'pipe'\r\n        : 'ignore'; /* value === false || value === 'ignore' */\r\n    }\r\n\r\n    execOptions.stdio = [\r\n      stdioOption(stdin, 0, process.stdin),\r\n      stdioOption(stdout, 1, process.stdout),\r\n      stdioOption(stderr, 2, process.stderr)\r\n      ];\r\n    \r\n    var encoding = data.encoding;\r\n    var bufferedStdOut = bufferedOutput && execOptions.stdio[1] === 'pipe';\r\n    var bufferedStdErr = bufferedOutput && execOptions.stdio[2] === 'pipe';\r\n    var stdOutLength = 0;\r\n    var stdErrLength = 0;\r\n    var stdOutBuffers = [];\r\n    var stdErrBuffers = [];\r\n\r\n    if (bufferedOutput && !Buffer.isEncoding(encoding)) {\r\n      if (encoding === 'buffer') {\r\n        encoding = 'binary';\r\n      } else {\r\n        grunt.fail.fail('Encoding \"' + encoding + '\" is not a supported character encoding!');\r\n        done(false);\r\n      }\r\n    }\r\n\r\n    if (verbose) {\r\n      stdioDescriptions = execOptions.stdio.slice();\r\n      for (var i = 0; i < stdioDescriptions.length; i++) {\r\n        stdioDescription = stdioDescriptions[i];\r\n        if (stdioDescription === process.stdin) {\r\n          stdioDescriptions[i] = 'process.stdin';\r\n        } else if (stdioDescription === process.stdout) {\r\n          stdioDescriptions[i] = 'process.stdout';\r\n        } else if (stdioDescription === process.stderr) {\r\n          stdioDescriptions[i] = 'process.stderr';\r\n        }\r\n      }\r\n\r\n      verbose.writeln('buffer   : ' + (bufferedOutput ? \r\n        (bufferedStdOut ? 'stdout=enabled' : 'stdout=disabled')\r\n        + ';' + \r\n        (bufferedStdErr ? 'stderr=enabled' : 'stderr=disabled') \r\n        + ';' + \r\n        'max size=' + maxBuffer\r\n        : 'disabled'));\r\n      verbose.writeln('timeout  : ' + (execOptions.timeout === 0 ? 'infinite' : '' + execOptions.timeout + 'ms'));\r\n      verbose.writeln('killSig  : ' + execOptions.killSignal);\r\n      verbose.writeln('shell    : ' + execOptions.shell);\r\n      verbose.writeln('command  : ' + command);\r\n      verbose.writeln('args     : [' + args.join(',') + ']');\r\n      verbose.writeln('stdio    : [' + stdioDescriptions.join(',') + ']');\r\n      verbose.writeln('cwd      : ' + execOptions.cwd);\r\n      //verbose.writeln('env path : ' + process.env.PATH);\r\n      verbose.writeln('exitcodes:', exitCodes.join(','));\r\n    }\r\n\r\n    childProcess = cp.spawn(command, args, execOptions);\r\n\r\n    if (verbose) {\r\n      verbose.writeln('pid     : ' + childProcess.pid);\r\n    }\r\n\r\n    var killChild = function (reason) {\r\n      defaultError(reason);\r\n      process.kill(childProcess.pid, execOptions.killSignal);\r\n      //childProcess.kill(execOptions.killSignal);\r\n      done(false); // unlike exec, this will indicate an error - after all, it did kill the process\r\n    };\r\n\r\n    if (execOptions.timeout !== 0) {\r\n      var timeoutProcess = function() {\r\n        killChild('Timeout child process');\r\n      };\r\n      setInterval(timeoutProcess, execOptions.timeout);\r\n    }\r\n\r\n    var writeStdOutBuffer = function(d) {\r\n      var b = !Buffer.isBuffer(d) ? new Buffer(d.toString(encoding)) : d;\r\n      if (stdOutLength + b.length > maxBuffer) {\r\n        if (verbose) {\r\n          verbose.writeln(\"EXCEEDING MAX BUFFER: stdOut \" + stdOutLength + \" buffer \" + b.length + \" maxBuffer \" + maxBuffer);\r\n        }\r\n        killChild(\"stdout maxBuffer exceeded\");\r\n      } else {\r\n        stdOutLength += b.length;\r\n        stdOutBuffers.push(b);\r\n      }\r\n\r\n      // default piping behavior\r\n      if (stdout !== false && data.encoding !== 'buffer') {\r\n        defaultOut(d);\r\n      }\r\n    };\r\n\r\n    var writeStdErrBuffer = function(d) {\r\n      var b = !Buffer.isBuffer(d) ? new Buffer(d.toString(encoding)) : d;\r\n      if (stdErrLength + b.length > maxBuffer) {\r\n        if (verbose) {\r\n          verbose.writeln(\"EXCEEDING MAX BUFFER: stdErr \" + stdErrLength + \" buffer \" + b.length + \" maxBuffer \" + maxBuffer);\r\n        }\r\n        killChild(\"stderr maxBuffer exceeded\");\r\n      } else {\r\n        stdErrLength += b.length;\r\n        stdErrBuffers.push(b);\r\n      }\r\n\r\n      // default piping behavior\r\n      if (stderr !== false && data.encoding !== 'buffer') {\r\n        defaultError(d);\r\n      }\r\n    };\r\n\r\n    if (execOptions.stdio[1] === 'pipe') {\r\n      var pipeOut = bufferedStdOut ? writeStdOutBuffer : defaultOut;\r\n      childProcess.stdout.on('data', function (d) { pipeOut(d); });\r\n    }\r\n\r\n    if (execOptions.stdio[2] === 'pipe') {\r\n      var pipeErr = bufferedStdErr ? writeStdErrBuffer : defaultError;\r\n      childProcess.stderr.on('data', function (d) { pipeErr(d); });\r\n    }\r\n\r\n    // Catches failing to execute the command at all (eg spawn ENOENT),\r\n    // since in that case an 'exit' event will not be emitted.\r\n    childProcess.on('error', function (err) {\r\n      defaultError(f('Failed with: %s', err));\r\n      done(false);\r\n    });\r\n\r\n    childProcess.on('exit', function(code) {\r\n      if (callbackErrors) {\r\n        defaultError('Node returned an error for this child process');\r\n        return done(false);\r\n      }\r\n\r\n      var stdOutBuffer = undefined;\r\n      var stdErrBuffer = undefined;\r\n\r\n      if (bufferedStdOut) {\r\n        stdOutBuffer = new Buffer(stdOutLength);\r\n        var offset = 0;\r\n        for (var i = 0; i < stdOutBuffers.length; i++) {\r\n          var buf = stdOutBuffers[i];\r\n          buf.copy(stdOutBuffer, offset);\r\n          offset += buf.length;\r\n        }\r\n\r\n        if (data.encoding !== 'buffer') {\r\n          stdOutBuffer = stdOutBuffer.toString(encoding);\r\n        }\r\n      }\r\n\r\n      if (bufferedStdErr) {\r\n        stdErrBuffer = new Buffer(stdErrLength);\r\n        var offset = 0;\r\n        for (var i = 0; i < stdErrBuffers.length; i++) {\r\n          var buf = stdErrBuffers[i];\r\n          buf.copy(stdErrBuffer, offset);\r\n          offset += buf.length;\r\n        }\r\n\r\n        if (data.encoding !== 'buffer') {\r\n          stdErrBuffer = stdErrBuffer.toString(encoding);\r\n        }\r\n      }\r\n\r\n      if (exitCodes.indexOf(code) < 0) {\r\n        defaultError(f('Exited with code: %d.', code));\r\n        if (callback) {\r\n          var err = new Error(f('Process exited with code %d.', code));\r\n          err.code = code;\r\n\r\n          callback(err, stdOutBuffer, stdErrBuffer);\r\n        }\r\n        return done(false);\r\n      }\r\n\r\n      verbose.ok(f('Exited with code: %d.', code));\r\n\r\n      if (callback) {\r\n        callback(null, stdOutBuffer, stdErrBuffer);\r\n      }\r\n\r\n      done();\r\n    });\r\n  });\r\n};\r\n"}